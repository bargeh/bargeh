@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Bargeh.Main.Wapp.Client.Infrastructure
@using Bargeh.Main.Wapp.Client.Services
@using Bargeh.Users.Api
@inherits LayoutComponentBase
@inject NotFoundListener NotFoundService
@inject IJSRuntime JsRuntime
@inject IdentityProto.IdentityProtoClient IdentityService
@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorageService

@{ /* PRODUCTION: Configure CSP */ }

<PageTitle>برگه</PageTitle>

<header>
	<div class="header-content">
		<div class="logo-name-links">
			<a href="/" class="logo-name-links">
				<img src="/img/Logo11-07.svg" alt="لوگوی برگه" class="logo-header">
				<span class="title-header">برگه</span>
			</a>
			<div class="header-navlinks">
				<a class="header-navlink">نسخه‌ی آزمایشی</a>
				<a class="header-navlink" @onclick='() => NavigationManager.NavigateTo("/Forum/New")'>انجمن جدید</a>
			</div>
		</div>
		<div class="shadow-box search-bar">
			<img src="/img/Search.svg" alt="علامت ذره‌بین" class="search-icon">
			<input type="text" class="search-input" placeholder="جست و جو در انجمن‌ها و گفت و گوها...">
		</div>
		<div class="header-buttons">
			<button class="shadow-box mobile-search" type="button">
				<img src="/img/Search.svg" alt="ذره‌بین" class="header-icon">
			</button>
			@*<button class="shadow-box-nohover" type="button" @onclick='() => NavigationManager.NavigateTo("/Login")'>
				<img src="/img/best.jpg" alt="کاربر" class="header-icon">
			</button>*@
			<button class="header-user-button" @onclick='() => NavigationManager.NavigateTo("/Login")'>
				@if(!string.IsNullOrWhiteSpace(_username))
				{
					@* TODO: Fetch user profile image *@
					<img class="header-user-icon" src="/img/best.jpg" alt="تصویر کاربر">
				}
				else
				{
					<img class="header-user-icon" src="/img/User.jpg" alt="تصویر کاربر">
				}
			</button>
		</div>
	</div>
</header>

@if(_notFound)
{
	<NotFoundError/>
}
else
{
	@Body
}

<div class="search-overlay">
	<div class="search-container">
		<div class="shadow-box search-bar">
			<img src="img/Search.svg" alt="علامت ذره‌بین" class="search-icon">
			<input type="text" class="search-input" placeholder="جست و جو در انجمن‌ها و گفت و گوها...">
			<button class="search-close">بستن</button>
		</div>
	</div>
</div>

<footer>
	<div class="footer-content">
		<div class="footer-info">
			<img src="/img/Logo11-07-White.svg" class="logo-header" alt="لوگوی سفید">
			<span class="footer-title">برگه</span>
			<img class="footer-bullet desktop-only" src="/img/Circle.svg" alt="دایره‌ی جداکننده">
			<p class="desktop-only">در حال توسعه توسط متین محمدی و مشارکت‌کنندگان متن باز</p>
		</div>
		<div class="footer-links">
			<a>اطلاعات</a> <img class="footer-bullet" src="/img/Circle.svg" alt="دایره‌ی جداکننده">
			<a>
				حریم
				خصوصی
			</a>
			<img class="footer-bullet" src="/img/Circle.svg" alt="دایره‌ی جداکننده"> <a>شرایط استفاده</a>
		</div>
	</div>
</footer>

@code
{
	private bool _notFound;
	private string _username = string.Empty;

	protected override void OnInitialized()
	{
		NotFoundService.OnNotFound += SetNotFound;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(!firstRender)
		{
			return;
		}
		
		await JsRuntime.InvokeVoidAsync("setMainLayoutDotnetHelper", DotNetObjectReference.Create(this));

		string? accessToken = await LocalStorageService.GetItemAsync<string>("login.access_token");

		if(!string.IsNullOrWhiteSpace(accessToken))
		{
			accessToken = accessToken[..accessToken.IndexOf("@", StringComparison.Ordinal)];
			JwtSecurityTokenHandler tokenHandler = new();
			IEnumerable<Claim> accessTokenClaims = tokenHandler.ReadJwtToken(accessToken).Claims!;

			string username = accessTokenClaims.First(c => c.Type == JwtRegisteredClaimNames.UniqueName).Value;

			_username = username;

			await JsRuntime.InvokeVoidAsync("setUserDetails", username);
		}
		
		StateHasChanged();
	}

	private void SetNotFound()
	{
		_notFound = true;
		StateHasChanged();
	}

	[JSInvokable]
	public async Task UpdateLoginTokens()
	{
		string? rawRefreshToken = await LocalStorageService.GetItemAsync<string>("login.refresh_token");

		if(string.IsNullOrWhiteSpace(rawRefreshToken))
		{
			return;
		}

		TokenResponse result = await IdentityService.RefreshAsync(new()
		{
			OldRefreshToken = rawRefreshToken.Replace("\"", "")
		});

		await LocalStorageService.SetItemAsync("login.access_token", $"{result.AccessToken}@{DateTime.UtcNow.AddMinutes(5)}");
		await LocalStorageService.SetItemAsync("login.refresh_token", result.RefreshToken);
	}
}