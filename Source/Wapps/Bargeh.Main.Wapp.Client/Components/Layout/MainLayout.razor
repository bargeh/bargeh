@using Bargeh.Main.Wapp.Client.Infrastructure
@using Bargeh.Main.Wapp.Client.Services
@using Identity.Api
@inherits LayoutComponentBase
@inject NotFoundListener NotFoundService
@inject IJSRuntime JsRuntime
@inject IdentityProto.IdentityProtoClient IdentityService
@inject LocalStorageService LocalStorageService
@inject ILogger<MainLayout> Logger

@{ /* PRODUCTION: Configure CSP */ }

<PageTitle>برگه</PageTitle>

<MainHeader/>

@if(_notFound)
{
	<h1>Could not find the content you are looking for</h1>
}
else
{
	<div class="container">
		@Body
	</div>
}

<div class="search-overlay">
	<div class="search-container">
		<div class="shadow-box search-bar">
			<img src="img/Search.svg" alt="علامت ذره‌بین" class="search-icon">
			<input type="text" class="search-input" placeholder="جست و جو در انجمن‌ها و گفت و گوها...">
			<button class="search-close">بستن</button>
		</div>
	</div>
</div>

<footer>
	<div class="footer-content">
		<div class="footer-info">
			<img src="/img/Logo11-07-White.svg" class="logo-header" alt="لوگوی سفید">
			<span class="footer-title">برگه</span>
			<img class="footer-bullet desktop-only" src="/img/Circle.svg" alt="دایره‌ی جداکننده">
			<p class="desktop-only">در حال توسعه توسط متین محمدی و مشارکت‌کنندگان متن باز</p>
		</div>
		<div class="footer-links">
			<a>اطلاعات</a> <img class="footer-bullet" src="/img/Circle.svg" alt="دایره‌ی جداکننده">
			<a>
				حریم
				خصوصی
			</a>
			<img class="footer-bullet" src="/img/Circle.svg" alt="دایره‌ی جداکننده"> <a>شرایط استفاده</a>
		</div>
	</div>
</footer>

@code{
	private bool _notFound;

	protected override void OnInitialized()
	{
		NotFoundService.OnNotFound += SetNotFound;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeVoidAsync("setMainLayoutDotnetHelper", DotNetObjectReference.Create(this));
	}

	private void SetNotFound()
	{
		_notFound = true;
		StateHasChanged();
	}

	[JSInvokable]
	public async Task UpdateLoginTokens()
	{
		string? rawRefreshToken = await LocalStorageService.GetItemAsync<string>("login.refresh_token");

		if(string.IsNullOrWhiteSpace(rawRefreshToken))
		{
			return;
		}
		
		TokenResponse result = await IdentityService.RefreshAsync(new()
		{
			OldRefreshToken = rawRefreshToken.Replace("\"", "")
		});

		await LocalStorageService.SetItemAsync("login.access_token", $"{result.AccessToken}@{DateTime.UtcNow.AddMinutes(5)}");
		await LocalStorageService.SetItemAsync("login.refresh_token", result.RefreshToken);
	}

}