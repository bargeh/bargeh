@page "/Login"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Bargeh.Main.Wapp.Client.Infrastructure.Dtos.Login
@using Bargeh.Main.Wapp.Client.Services
@using Grpc.Core
@using Users.Api
@using JwtRegisteredClaimNames = Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames
@inject IJSRuntime JsRuntime
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityProto.IdentityProtoClient IdentityService
@inject SmsProto.SmsProtoClient SmsService
@inject UsersProto.UsersProtoClient UsersService
@inject LocalStorageService LocalStorageService

<PageTitle>ورود و عضویت - برگه</PageTitle>

<div class="popup">
	<span class="no-block-margin pad-bottom horizontal-align center-flex"><img src="/img/User.svg" class="tiny-icon" alt="کاربر"/>ورود / ثبت نام</span>

	@if(_loginState is not(LoginState.Login or LoginState.SetPassword))
	{
		<a @onclick="OnLoginRequested" class="center pad-bottom">برگرد به ورود ←</a>
	}

	@* ReSharper disable SwitchStatementHandlesSomeKnownEnumValuesWithDefault *@
	@switch(_loginState)
	{
		case LoginState.Login:
			<EditForm EditContext="_loginEditContext" FormName="login" OnSubmit="OnLoginSubmit">
				<DataAnnotationsValidator/>

				<div class="input-group">
					<label>شماره‌ی همراه</label>
					<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_loginModel.Phone"/>
				</div>

				<div class="input-group">
					<label>رمز عبور</label>
					<InputText type="password" autocomplete="current-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_loginModel.Password"/>
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<a class="center" @onclick="OnRegisterRequested">حساب کاربری نداری؟</a>
				<a class="center" @onclick="OnVerificationRequested">رمزت رو فراموش کردی؟</a>

				<ValidationSummary class="red form-errors"/>
			</EditForm>
			break;

		case LoginState.Register:
			@* <div class="tip">
	<img src="img/Lamp.svg" alt="چراغ">
	<p>به برگه خوش اومدی! برای شروع کار، لطفا اول ثبت نام کن</p>
	</div> *@

			<EditForm EditContext="_resisterEditContext" FormName="register" OnValidSubmit="OnRegisterSubmit">
				<DataAnnotationsValidator/>

				<div class="input-group">
					<label>شماره‌ی همراه</label>
					<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Phone"/>
				</div>

				<div class="input-group">
					<label>نام کاربری</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Username"/>
				</div>

				<div class="input-group">
					<label>نام نمایشی</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.DisplayName"/>
				</div>

				<div class="center">
					<label>شرایط استفاده از برگه رو خوندم و قبول می‌کنم</label>
					<InputCheckbox aria-required="true" @bind-Value="_registerModel.AcceptedTos"/>
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<ValidationSummary class="red form-errors"/>
			</EditForm>
			break;

		case LoginState.Verify:
			<EditForm EditContext="_verificationEditContext" FormName="verification" OnSubmit="OnVerificationSubmit">
				<DataAnnotationsValidator/>

				<div class="input-group">
					<label>شماره‌ی همراه</label>
					<InputText disabled="@_verificationPhoneDisabled" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_verificationModel.Phone"/>
				</div>

				<div class="input-group" style="@(!_verificationPhoneDisabled ? "display: none" : string.Empty)">
					<label>کد تایید</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_verificationModel.VerificationCode"/>
				</div>

				<button class="button-bubble-static-inline" type="submit">@_verificationButtonText</button>

				<ValidationSummary class="red form-errors"/>
			</EditForm>
			break;

		case LoginState.SetPassword:
			<EditForm EditContext="_setPasswordEditContext" FormName="verification" OnSubmit="OnSetPasswordSubmit">
				<DataAnnotationsValidator/>

				<div class="input-group">
					<label>رمز عبور</label>
					<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.Password"/>
				</div>

				<div class="input-group">
					<label>تایید رمز عبور</label>
					<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.ConfirmPassword"/>
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<ValidationSummary class="red form-errors"/>
			</EditForm>
			break;
	}
	@* ReSharper restore SwitchStatementHandlesSomeKnownEnumValuesWithDefault *@

</div>

<p>@_info</p>

@* ReSharper disable FieldCanBeMadeReadOnly.Local *@

@code {
	private LoginState _loginState = LoginState.Login;

	private string _info = string.Empty;

	protected override void OnInitialized()
	{
		#region Login Initialization

		_loginEditContext = new(_loginModel);
		_loginMessageStore = new(_loginEditContext);

		#endregion

		#region Register Initialization

		_resisterEditContext = new(_registerModel);
		_registerMessageStore = new(_resisterEditContext);

		#endregion

		#region Verify Initialization

		_verificationEditContext = new(_verificationModel);
		_verificationMessageStore = new(_verificationEditContext);

		#endregion

		#region Set Password Initialization

		_setPasswordEditContext = new(_setPasswordModel);
		_setPasswordValidationMessageStore = new(_setPasswordEditContext);

		#endregion
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		string? accessToken = await LocalStorageService.GetItemAsync<string>("login.access_token");

		if(!string.IsNullOrWhiteSpace(accessToken))
		{
			accessToken = accessToken[..accessToken.IndexOf("@", StringComparison.Ordinal)];
			JwtSecurityTokenHandler tokenHandler = new();
			IEnumerable<Claim> accessTokenClaims = tokenHandler.ReadJwtToken(accessToken).Claims!;
			string username = accessTokenClaims.First(c => c.Type == JwtRegisteredClaimNames.UniqueName).Value;

			NavigationManager.NavigateTo($"/User/{username}", replace: true);
		}
	}

	#region Login

	private LoginDto _loginModel = new();
	private EditContext _loginEditContext = null!;
	private ValidationMessageStore _loginMessageStore = null!;

	private async Task OnLoginSubmit()
	{
		_loginMessageStore.Clear();

		if(!_loginEditContext.Validate())
		{
			return;
		}

		Logger.LogInformation("valid");

		if(!_loginModel.PhoneValid)
		{
			_loginMessageStore.Add(() => _loginModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		try
		{
			TokenResponse loginResult = await IdentityService.LoginAsync(new()
			{
				Phone = _loginModel.Phone,
				Password = _loginModel.Password
			});

			Logger.LogInformation($"{loginResult.AccessToken} is access and \n{loginResult.RefreshToken} is refresh");

			await LocalStorageService.RemoveItemAsync("login.access_token");
			await LocalStorageService.RemoveItemAsync("login.refresh_token");

			await LocalStorageService.SetItemAsync("login.access_token", $"{loginResult.AccessToken}@{DateTime.UtcNow.AddMinutes(5)}");
			await LocalStorageService.SetItemAsync("login.refresh_token", loginResult.RefreshToken);

			NavigationManager.NavigateTo("/", true, true);
		}
		catch(RpcException exception)
		{
			if(exception.StatusCode == StatusCode.NotFound)
			{
				Logger.LogInformation("Here it calls!");
				Logger.LogInformation($"Phone: {_loginModel.Phone}");

				_loginMessageStore.Add(() => _loginModel.Phone!, "حساب کاربری با این شماره همراه و رمز عبور وجود نداره. مطمئنی همه چیز رو درست وارد کردی؟");
				_loginEditContext.NotifyValidationStateChanged();
			}
		}
	}

	#endregion

	#region Register

	private RegisterDto _registerModel = new();
	private EditContext _resisterEditContext = null!;
	private ValidationMessageStore _registerMessageStore = null!;

	private async Task OnRegisterSubmit()
	{
		if(!_resisterEditContext.Validate())
		{
			return;
		}

		if(!_registerModel.PhoneValid)
		{
			_registerMessageStore.Add(() => _registerModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		HashSet<char> allowedCharsForUsername =
		[
			'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
			'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
			'_', '.'
		];

		if(string.IsNullOrWhiteSpace(_registerModel.DisplayName) || string.IsNullOrWhiteSpace(_registerModel.Username) || !_registerModel.Username.ToLower().All(c => allowedCharsForUsername.Contains(c)))
		{
			_registerMessageStore.Add(() => _registerModel, "نام کاربری یا نام نمایشی که انتخاب کردی درست نیست");
			return;
		}

		try
		{
			await UsersService.AddUserAsync(new()
			{
				Phone = _registerModel.Phone,
				DisplayName = _registerModel.DisplayName,
				Username = _registerModel.Username,
				AcceptedTos = _registerModel.AcceptedTos,
				Captcha = "5"
			});
		}
		catch(RpcException exception)
		{
			if(exception.StatusCode == StatusCode.AlreadyExists)
			{
				_registerMessageStore.Add(() => _registerModel, "قبلا یک کاربر با این شماره تلفن ثبت نام کرده. اگه تو بودی از بخش ورود وارد حسابت شو");
				_resisterEditContext.NotifyValidationStateChanged();

				return;
			}

			throw;
		}

		await SmsService.SendVerificationAsync(new()
		{
			Phone = _registerModel.Phone
		});

		_loginState = LoginState.Verify;
		_verificationModel.Phone = _registerModel.Phone;
		_verificationPhoneDisabled = true;
		_verificationButtonText = VERIFICATION_VERIFY_CODE;
	}

	#endregion

	#region Verify

	private VerificationDto _verificationModel = new();
	private EditContext _verificationEditContext = null!;
	private ValidationMessageStore _verificationMessageStore = null!;

	private const string VERIFICATION_SEND_CODE = "ارسال کد فعال‌سازی";
	private const string VERIFICATION_VERIFY_CODE = "تایید کد فعال‌سازی";

	private string _verificationButtonText = VERIFICATION_SEND_CODE;
	private bool _verificationPhoneDisabled;

	private async Task OnVerificationSubmit()
	{
		_verificationMessageStore.Clear();

		if(_verificationPhoneDisabled && string.IsNullOrWhiteSpace(_verificationModel.VerificationCode))
		{
			_verificationMessageStore.Add(() => _verificationModel.Phone!, "کد تایید رو لطفا وارد کن");
			return;
		}

		if(!_verificationEditContext.Validate())
		{
			return;
		}

		if(!_verificationModel.PhoneValid)
		{
			_verificationMessageStore.Add(() => _verificationModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		ProtoUser? user = await UsersService.GetUserByPhoneAsync(new()
		{
			Phone = _verificationModel.Phone
		});

		if(user is null)
		{
			_verificationMessageStore.Add(() => _verificationModel.Phone!, "کاربری با این شماره همراه در برگه وجود نداره");
			return;
		}

		if(!_verificationPhoneDisabled)
		{
			_verificationButtonText = VERIFICATION_VERIFY_CODE;
			_verificationPhoneDisabled = true;

			await SmsService.SendVerificationAsync(new()
			{
				Phone = _verificationModel.Phone
			});

			return;
		}

		try
		{
			await SmsService.ValidateVerificationCodeAsync(new()
			{
				Phone = _verificationModel.Phone,
				Code = _verificationModel.VerificationCode
			});
		}
		catch(RpcException exception)
		{
			if(exception.StatusCode == StatusCode.NotFound)
			{
				_verificationMessageStore.Add(() => _verificationModel.VerificationCode!, "کد تاییدی که وارد کردی درست نیست");
				_verificationEditContext.NotifyValidationStateChanged();
				return;
			}

			if(exception.StatusCode == StatusCode.InvalidArgument)
			{
				switch(exception.Message)
				{
					case"Parameter \"Verification Code\" is expired":
						_verificationMessageStore.Add(() => _verificationModel.VerificationCode!, "کد تاییدی که وارد کردی منقضی شده، دوباره سعی کن");
						_verificationEditContext.NotifyValidationStateChanged();
						return;
				}
			}

			throw;
		}

		_loginState = LoginState.SetPassword;
	}

	#endregion

	#region Set Password

	private SetPasswordDto _setPasswordModel = new();
	private EditContext _setPasswordEditContext = null!;
	private ValidationMessageStore _setPasswordValidationMessageStore = null!;

	private async Task OnSetPasswordSubmit()
	{
		if(!_setPasswordEditContext.Validate())
		{
			return;
		}

		await UsersService.SetUserPasswordAsync(new()
		{
			Password = _setPasswordModel.Password,
			Phone = _loginModel.Phone ?? _registerModel.Phone
		});

		NavigationManager.NavigateTo("/", true, true);
	}

	#endregion

	#region Verify Phone

	#endregion

	#region Events

	private void OnLoginRequested()
	{
		_loginState = LoginState.Login;
	}

	private void OnRegisterRequested()
	{
		_loginState = LoginState.Register;
	}

	private void OnVerificationRequested()
	{
		_loginState = LoginState.Verify;
	}

	#endregion

	private enum LoginState
	{
		Login,
		Register,
		Verify,
		SetPassword
	}

}