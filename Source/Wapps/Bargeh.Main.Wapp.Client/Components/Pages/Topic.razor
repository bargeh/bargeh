@page "/Topic/{ForumPermalink}/{TopicPermalink}"
@inject NotFoundListener NotFoundService
@inject ForumsProto.ForumsProtoClient ForumsService
@inject TopicsProto.TopicsProtoClient TopicsService
@inject LocalStorageService LocalStorageService
@inject IJSRuntime JsRuntime
@inject ILogger<Topic> Logger
@rendermode InteractiveAuto
@inject PersistentComponentState ApplicationState
@using System.Text.Encodings.Web
@using System.Text.Json
@using System.Text.Unicode
@using Bargeh.Main.Wapp.Client.Infrastructure
@using Bargeh.Main.Wapp.Client.Services
@using Forums.Api
@using Grpc.Core
@implements IDisposable

@if(_topic is not null && _forum is not null)
{
	<div class="container">
		<div class="shadow-box-nohover topic-first-post">
			<strong class="center">گفت و گو در <a href="/Forum/@_forum.Permalink">@_forum.Name ←</a></strong>
			<h1 class="center title">@_topic.Title</h1>
			<div class="topic-content">
				@_topic.HeadPost.Body
			</div>
			<div class="topic-info">
				<p>توسط <a>@@@_topic.HeadPost.AuthorUsername</a></p>
				<div class="footer-links button-bubble reactions">
					<span class="reactions-count">@GetPostReactionsNumber(_topic.HeadPost)</span>
					<img alt="پسند" class="reaction-icon" src="img/Like.svg">
					<img alt="قلب" class="reaction-icon" src="img/Love.svg">
					<img alt="چراغ" class="reaction-icon" src="img/Light.svg">
				</div>
			</div>

			<input type="hidden" id="@(_topic.HeadPost.Id)_id" value="@_topic.HeadPost.Id"/>
			<input type="hidden" id="@(_topic.HeadPost.Id)_likes" value="@_topic.HeadPost.Likes"/>
			<input type="hidden" id="@(_topic.HeadPost.Id)_loves" value="@_topic.HeadPost.Loves"/>
			<input type="hidden" id="@(_topic.HeadPost.Id)_funnies" value="@_topic.HeadPost.Funnies"/>
			<input type="hidden" id="@(_topic.HeadPost.Id)_insights" value="@_topic.HeadPost.Insights"/>
			<input type="hidden" id="@(_topic.HeadPost.Id)_dislikes" value="@_topic.HeadPost.Dislikes"/>
		</div>
		<div class="tip">
			<img alt="چراغ" src="img/Lamp.svg">
			<p>برای پیمایش برگه‌ها را به سمت چپ و راست بکشید</p>
		</div>

		@* TODO: Why not render the components using blazor? Why use JS? *@

		<section class="splide">
			<div class="splide__arrows">
				<button class="splide__arrow splide__arrow--prev">
					<img alt="پیکان جهت‌یابی"
						 src="img/NavArrow.svg">
				</button>
				<button class="splide__arrow splide__arrow--next">
					<img alt="پیکان جهت‌یابی"
						 src="img/NavArrow.svg">
				</button>
			</div>

			<div class="splide__track">
				<ul class="splide__list">
					<li class="splide__slide">
						<div FormName="createPost" class="shadow-box new-postchain">
							<div class="title-box">
								<img alt="قلم" src="img/Pen.svg"><strong>رشته‌برگ جدید</strong>
							</div>

							<textarea class="text-input" placeholder="یه چیزی بنویس..."></textarea>

							<div class="send-box">
								<button class="button-bubble">
									<img alt="عکس" src="img/Image.svg">
								</button>
								<button class="button-bubble">
									<img alt="عکس" src="img/Attachment.svg">
								</button>

								<button class="footer-links button-bubble" type="submit" onclick="submitPost(this)">
									<img alt="ارسال" src="img/Send.svg">
									<p>ارسال</p>
								</button>
							</div>
						</div>
					</li>
				</ul>
			</div>
		</section>
	</div>
}
else
{
	<Loading/>
}

@code
{
	// PRODUCTION: Render posts at prerendering even if they are not formatted, then format them with js, it kills SEO

	[Parameter]
	public string ForumPermalink { get; init; } = null!;

	[Parameter]
	public string TopicPermalink { get; init; } = null!;

	private ProtoForum? _forum;
	private ProtoTopic? _topic;
	private PersistingComponentStateSubscription _subscription;

	protected override async Task OnInitializedAsync()
	{
		_subscription = ApplicationState.RegisterOnPersisting(PersistComponentState);

		bool persistentValuesFound = ApplicationState
			.TryTakeFromJson("forum", out ProtoForum? forum);
		ApplicationState.TryTakeFromJson("topic", out ProtoTopic? topic);

		if(persistentValuesFound)
		{
			_forum = forum;
			_topic = topic;
		}
		else
		{
			try
			{
				_forum = await ForumsService.GetForumByPermalinkAsync(new()
				{
					Permalink = ForumPermalink
				});

				_topic = await TopicsService.GetTopicByPermalinkAsync(new()
				{
					Forum = _forum.Id,
					Permalink = TopicPermalink
				});
			}
			catch(RpcException exception)
			{
				// ReSharper disable once InvertIf
				if(exception.StatusCode == StatusCode.NotFound)
				{
					NotFoundService.NotifyNotFound();
					return;
				}

				throw;
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeVoidAsync("setTopicsDotnetHelper", DotNetObjectReference.Create(this));
		await JsRuntime.InvokeVoidAsync("initTopics");

		JsonSerializerOptions jsonSerializerOptions = new()
		{
			Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
		};

		// TODO: Fix child posts being added 2 times

		string json = JsonSerializer.Serialize(_topic!, jsonSerializerOptions);

		await JsRuntime.InvokeVoidAsync("addPosts", json);
	}

	[JSInvokable]
	public async Task<string> GetMorePostchains()
	{
		string? accessToken = LocalStorageService.GetAccessToken(await LocalStorageService.GetItemAsync<string>("login.access_token"));

		if(string.IsNullOrWhiteSpace(accessToken))
		{
			return string.Empty;
		}

		string[] ids = await JsRuntime.InvokeAsync<string[]>("getSeenPostchains");

		GetMorePostChainsReply response = await TopicsService.GetMorePostChainsAsync(new()
		{
			AccessToken = accessToken,
			Topic = _topic!.Id,
			SeenPostchains = { ids }
		});

		JsonSerializerOptions jsonSerializerOptions = new()
		{
			Encoder = JavaScriptEncoder.Create(UnicodeRanges.All)
		};

		string json = JsonSerializer.Serialize(response, jsonSerializerOptions);

		return json;
	}

	[JSInvokable]
	public async Task ReactOnPost(string postId, byte reactionType)
	{
		reactionType++;
		await TopicsService.ReactOnPostAsync(new()
		{
			AccessToken = LocalStorageService.GetAccessToken(await LocalStorageService.GetItemAsync<string>("login.access_token")),
			Post = postId,
			State = (ReactionUpdateState)reactionType
		});
	}

	public static uint GetPostReactionsNumber(ProtoPost post)
	{
		return post.Likes + post.Loves + post.Funnies + post.Insights + post.Dislikes;
	}

	[JSInvokable]
	public async Task OnNewPostSubmit(string body, string parentId)
	{
		await TopicsService.CreatePostAsync(new()
		{
			AccessToken = LocalStorageService.GetAccessToken(await LocalStorageService.GetItemAsync<string>("login.access_token")),
			Body = body,
			Parent = parentId

			// TODO: Code adding parent and media too
		});
	}

	private Task PersistComponentState()
	{
		ApplicationState.PersistAsJson("forum", _forum);
		ApplicationState.PersistAsJson("topic", _topic);
		return Task.CompletedTask;
	}

	public void Dispose()
	{
		_subscription.Dispose();
	}
}

