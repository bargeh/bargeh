@page "/Forum/{ForumPermalink}"
@using Forums.Api
@using Grpc.Core
@using Bargeh.Main.Wapp.Client.Infrastructure
@using Bargeh.Main.Wapp.Client.Services
@using Topics.Api
@inject ForumsProto.ForumsProtoClient ForumsService
@inject TopicsProto.TopicsProtoClient TopicsService
@inject NotFoundListener NotFoundService
@inject LocalStorageService LocalStorageService
@inject PersistentComponentState ApplicationState
@implements IDisposable

@if(_forum is not null)
{
	<div class="cover" style="background-image: url('/img/@(_forum.Cover).webp');"></div>
	<div class="profile">
		<img src="img/@(_forum.Avatar).webp" alt="تصویر نمایه @_forum.Name">
		<h1 class="center">@_forum.Name</h1>
		<div class="index-buttons">
			<p>@_forum.Members عضو</p>
			<p>۱۳ حامی</p>
		</div>
		<p>مالک انجمن: <a>@@@_forum.OwnerUsername</a></p>
		<p>ناظران انجمن: <a>@@user10</a>، <a>@@user02</a>، <a>@@user03</a></p>
		<p class="center-justify">@_forum.Description</p>
		<div class="index-buttons">
			<button @onclick="OnFollowButtonClicked" type="button" class="button-filled">
				<img src="img/UserPlus.svg" alt="دنبال کردن">
				<p>عضویت در انجمن</p>
			</button>
			<button type="button" class="button-gold" onclick="alert('هه هه، از طرف مالک انجمن ازت تشکر می‌کنم، ولی فعلا باید صبر کنی تا برنامه‌نویسی برگه تکمیل شه 😅')">
				<img src="img/Support.svg" alt="حمایت">
				<p>حمایت از انجمن</p>
			</button>
		</div>
	</div>

	<div class="footer-info">
		<h2> گفت و گو‌های @_forum.Name</h2>
		<div class="shadow-box secondary-search-bar footer-links">
			<img src="img/Search.svg" alt="علامت ذره‌بین" class="search-icon">
			<input type="text" class="search-input" placeholder="جست و جو در گفت و گوهای @_forum.Name...">
		</div>
	</div>

	<div class="forums-list">
		@foreach(ProtoTopic topic in _recentTopics)
		{
			<TopicSingle Forum="_forum" Topic="topic"/>
		}
	</div>

	<a class="button-primary">
		<img src="img/More.svg" alt="بیشتر">
		<p>نمایش بیشتر</p>
	</a>
}
else
{
	<Loading/>
}

@code {

	[Parameter]
	public string ForumPermalink { get; init; } = null!;

	private ProtoForum? _forum;
	private List<ProtoTopic> _recentTopics = null!;
	private PersistingComponentStateSubscription _subscription;

	protected override async Task OnInitializedAsync()
	{
		_subscription = ApplicationState.RegisterOnPersisting(PersistComponentState);

		bool persistentValuesFound = ApplicationState
			.TryTakeFromJson("forum", out ProtoForum? forum);
		ApplicationState.TryTakeFromJson("recent_topics", out List<ProtoTopic>? recentTopics);

		if(persistentValuesFound)
		{
			_forum = forum;
			_recentTopics = recentTopics!;
		}
		else
		{
			try
			{
				_forum = await ForumsService.GetForumByPermalinkAsync(new()
				{
					Permalink = ForumPermalink
				});

				_recentTopics = (await TopicsService.GetRecentTopicsByForumAsync(new()
									{
										Forum = _forum.Id
									})).Topics.ToList();
			}
			catch(RpcException exception)
			{
				// ReSharper disable once InvertIf
				if(exception.StatusCode == StatusCode.NotFound)
				{
					NotFoundService.NotifyNotFound();
					return;
				}

				throw;
			}
		}
	}

	private async Task OnFollowButtonClicked()
	{
		// TODO: Check if the user is logged in
		// TODO: Also check if the use is already a member or not
		await ForumsService.JoinForumAsync(new()
		{
			Forum = _forum!.Id,
			AccessToken = LocalStorageService.GetAccessToken(await LocalStorageService.GetItemAsync<string>("login.access_token"))
		});

		_forum.Members++;
	}

	private Task PersistComponentState()
	{
		ApplicationState.PersistAsJson("forum", _forum);
		ApplicationState.PersistAsJson("recent_topics", _recentTopics);
		return Task.CompletedTask;
	}

	public void Dispose()
	{
		_subscription.Dispose();
	}

}