@page "/Login"
@rendermode InteractiveServer

@using Bargeh.Main.Wapp.Infrastructure.Dtos

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@* @inject UsersApiGrpcClientProvider UsersApi *@

<PageTitle>ورود و عضویت - برگه</PageTitle>

<HeadContent>
	<script src="/js/login.js"></script>
</HeadContent>

<div class="popup">
	<span class="no-block-margin padding-buttom horizontal-align center-flex"><img src="/img/User.svg" class="tiny-icon" alt="کاربر" />ورود / ثبت نام</span>

	@switch (_loginState)
	{
		case LoginState.Login:
			<EditForm EditContext="_loginEditContext" FormName="login" OnSubmit="OnLoginSubmit">
				<DataAnnotationsValidator />

				<div class="input-group">
					<label>شماره‌ی همراه</label>
					<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_loginModel.Phone" />
				</div>

				<div class="input-group">
					<label>رمز عبور</label>
					<InputText type="password" autocomplete="current-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_loginModel.Password" />
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<a class="center" @onclick="OnRegisterRequested">حساب کاربری نداری؟</a>
				<a class="center" @onclick="OnVerificationRequested">رمزت رو فراموش کردی؟</a>

				<ValidationSummary class="red form-errors" />
			</EditForm>
			break;

		case LoginState.Register:
			@* <div class="tip">
	<img src="img/Lamp.svg" alt="چراغ">
	<p>به برگه خوش اومدی! برای شروع کار، لطفا اول ثبت نام کن</p>
	</div> *@

			<EditForm EditContext="_resisterEditContext" FormName="register" OnValidSubmit="OnRegisterSubmit">
				<DataAnnotationsValidator />

				<div class="input-group">
					<label>شماره‌ی همراه</label>
					<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Phone" />
				</div>

				<div class="input-group">
					<label>نام کاربری</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Username" />
				</div>

				@* TODO: Improve Tos Style *@
				<div class="input-group">
					<label>نام نمایشی</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.DisplayName" />
				</div>
				
				
				<div class="center">
					<label>شرایط استفاده از برگه رو خوندم و قبول می‌کنم</label>
					<InputCheckbox aria-required="true" @bind-Value="_registerModel.AcceptedTos" />
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<ValidationSummary class="red form-errors" />
			</EditForm>
			break;

		case LoginState.Verify:
			<EditForm EditContext="_verificationEditContext" FormName="verification" OnSubmit="OnVerificationSubmit">
				<DataAnnotationsValidator />

				<div class="input-group">
					<label>کد تایید</label>
					<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_verificationModel.VerificationCode" />
				</div>

				<button class="button-bubble-static-inline" type="submit">ارسال</button>

				<ValidationSummary class="red form-errors" />
			</EditForm>
			break;

		case LoginState.SetPassword:
			<EditForm EditContext="_setPasswordEditContext" FormName="verification" OnSubmit="OnSetPasswordSubmit">
				<DataAnnotationsValidator />

				<div class="input-group">
					<label>رمز عبور</label>
					<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.Password" />
				</div>

				<div class="input-group">
					<label>تایید رمز عبور</label>
					<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.ConfirmPassword" />
				</div>

				<button class="button-bubble-static-inline" type="submit">بعدی</button>

				<ValidationSummary class="red form-errors" />
			</EditForm>
			break;
	}
</div>

<p>@_info</p>

@code {
	private LoginState _loginState = LoginState.Login;

	private string _info = string.Empty;

	protected override void OnInitialized ()
	{
		#region Login Initialization

		_loginEditContext = new (_loginModel);
		_loginMessageStore = new (_loginEditContext);

		#endregion

		#region Register Initialization

		_resisterEditContext = new (_registerModel);
		_registerMessageStore = new (_resisterEditContext);

		#endregion

		#region Verify Initialization

		_verificationEditContext = new (_verificationModel);
		_verificationMessageStore = new (_verificationEditContext);

		#endregion

		#region Set Password Initialization

		_setPasswordEditContext = new (_setPasswordModel);
		_setPasswordValidationMessageStore = new (_setPasswordEditContext);

		#endregion
	}


	protected override void OnAfterRender (bool firstRender)
	{
		JsRuntime.InvokeVoidAsync ("onAfterRender");
	}

	#region Login

	private LoginDto _loginModel = new ();
	private EditContext _loginEditContext = null!;
	private ValidationMessageStore _loginMessageStore = null!;

	private void OnLoginSubmit ()
	{
		_loginMessageStore.Clear ();

		if (!_loginEditContext.Validate ())
		{
			return;
		}

		if (!_loginModel.PhoneValid)
		{
			_loginMessageStore.Add (() => _loginModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
		}
	}

	#endregion

	#region Register

	private RegisterDto _registerModel = new ();
	private EditContext _resisterEditContext = null!;
	private ValidationMessageStore _registerMessageStore = null!;

	private void OnRegisterSubmit ()
	{
		if (!_resisterEditContext.Validate ())
		{
			return;
		}

		if (!_registerModel.PhoneValid)
		{
			_registerMessageStore.Add (() => _registerModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
		}

		// TODO: Check if user is not currently registered
		// TODO: Connect to the SMS API for sending code


		_info += $"The verification code is {Random.Shared.Next (1000, 9999)}";

		_loginState = LoginState.Verify;
	}

	#endregion

	#region Verify

	private VerificationDto _verificationModel = new ();
	private EditContext _verificationEditContext = null!;
	private ValidationMessageStore _verificationMessageStore = null!;

	private void OnVerificationSubmit ()
	{
		_verificationMessageStore.Clear();

		if (!_verificationEditContext.Validate ())
		{
			return;
		}

		// TODO: Validate verification code

		if (_verificationModel.VerificationCode != "1000")
		{
			_verificationMessageStore.Add (() => _verificationModel.VerificationCode!, "کد تاییدی که وارد کردی درست نیست");
			return;
		}

		_loginState = LoginState.SetPassword;
	}

	#endregion

	#region Set Password

	private SetPasswordDto _setPasswordModel = new();
	private EditContext _setPasswordEditContext = null!;
	private ValidationMessageStore _setPasswordValidationMessageStore = null!;

	private void OnSetPasswordSubmit()
	{
		if (!_setPasswordEditContext.Validate())
		{
			return;
		}

		NavigationManager.NavigateTo("/", true, true);
	}

	#endregion

	#region Events

	private void OnRegisterRequested ()
	{
		_loginState = LoginState.Register;
		StateHasChanged ();
	}

	private void OnVerificationRequested()
	{
		_loginState = LoginState.Verify;
		StateHasChanged();
	}

	#endregion


	private enum LoginState
	{
		Login,
		Register,
		Verify,
		SetPassword
	}
}