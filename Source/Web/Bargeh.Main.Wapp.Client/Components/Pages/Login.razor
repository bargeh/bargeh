@page "/Login"
@using Bargeh.Main.Wapp.Client.Infrastructure.Dtos.Login
@using Bargeh.Main.Wapp.Client.Services
@using Grpc.Core
@using Identity.Api
@using System.Text.Json
@using Sms.Api
@inject IJSRuntime JsRuntime
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityProto.IdentityProtoClient IdentityService
@inject LocalStorageService LocalStorageService
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<PageTitle>ورود و عضویت - برگه</PageTitle>

<HeadContent>
	<script src="/js/login.js"></script>
</HeadContent>

<div class="popup">
	<span class="no-block-margin pad-bottom horizontal-align center-flex"><img src="/img/User.svg" class="tiny-icon" alt="کاربر" />ورود / ثبت نام</span>

	@(_loginState.ToString () // PRODUCTION: Remove this
		)

	@if (_loginState != LoginState.Login)
	{
		<a @onclick="OnLoginRequested" class="center pad-bottom">برگرد به ورود ←</a>
	}

	@* ReSharper disable SwitchStatementHandlesSomeKnownEnumValuesWithDefault *@
	@switch (_loginState)
	{
		case LoginState.Login:
		<EditForm EditContext="_loginEditContext" FormName="login" OnSubmit="OnLoginSubmit">
			<DataAnnotationsValidator />

			<div class="input-group">
				<label>شماره‌ی همراه</label>
				<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_loginModel.Phone" />
			</div>

			<div class="input-group">
				<label>رمز عبور</label>
				<InputText type="password" autocomplete="current-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_loginModel.Password" />
			</div>

			<button class="button-bubble-static-inline" type="submit">بعدی</button>

			<a class="center" @onclick="OnRegisterRequested">حساب کاربری نداری؟</a>
			<a class="center" @onclick="OnVerificationRequested">رمزت رو فراموش کردی؟</a>

			<ValidationSummary class="red form-errors" />
		</EditForm>
		break;

		case LoginState.Register:
		@* <div class="tip">
	<img src="img/Lamp.svg" alt="چراغ">
	<p>به برگه خوش اومدی! برای شروع کار، لطفا اول ثبت نام کن</p>
	</div> *@

		<EditForm EditContext="_resisterEditContext" FormName="register" OnValidSubmit="OnRegisterSubmit">
			<DataAnnotationsValidator />

			<div class="input-group">
				<label>شماره‌ی همراه</label>
				<InputText autocomplete="username" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Phone" />
			</div>

			<div class="input-group">
				<label>نام کاربری</label>
				<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.Username" />
			</div>

			<div class="input-group">
				<label>نام نمایشی</label>
				<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_registerModel.DisplayName" />
			</div>

			<div class="center">
				<label>شرایط استفاده از برگه رو خوندم و قبول می‌کنم</label>
				<InputCheckbox aria-required="true" @bind-Value="_registerModel.AcceptedTos" />
			</div>

			<button class="button-bubble-static-inline" type="submit">بعدی</button>

			<ValidationSummary class="red form-errors" />
		</EditForm>
		break;

		case LoginState.Verify:
		<EditForm EditContext="_verificationEditContext" FormName="verification" OnSubmit="OnVerificationSubmit">
			<DataAnnotationsValidator />

			<div class="input-group">
				<label>شماره‌ی همراه</label>
				<InputText disabled="@_verificationPhoneDisabled" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_verificationModel.Phone" />
			</div>

			<div class="input-group" style="@(!_verificationPhoneDisabled ? "display: none" : string.Empty)">
				<label>کد تایید</label>
				<InputText aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="@_verificationModel.VerificationCode" />
			</div>

			<button class="button-bubble-static-inline" type="submit">@_verificationButtonText</button>

			<ValidationSummary class="red form-errors" />
		</EditForm>
		break;

		case LoginState.SetPassword:
		<EditForm EditContext="_setPasswordEditContext" FormName="verification" OnSubmit="OnSetPasswordSubmit">
			<DataAnnotationsValidator />

			<div class="input-group">
				<label>رمز عبور</label>
				<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.Password" />
			</div>

			<div class="input-group">
				<label>تایید رمز عبور</label>
				<InputText type="password" autocomplete="new-password" aria-required="true" dir="ltr" class="button-bubble-static" @bind-Value="_setPasswordModel.ConfirmPassword" />
			</div>

			<button class="button-bubble-static-inline" type="submit">بعدی</button>

			<ValidationSummary class="red form-errors" />
		</EditForm>
		break;
	}
	@* ReSharper restore SwitchStatementHandlesSomeKnownEnumValuesWithDefault *@

</div>

<p>@_info</p>

@* ReSharper disable FieldCanBeMadeReadOnly.Local *@
@code {
	private LoginState _loginState = LoginState.Login;

	private string _info = string.Empty;

	protected override void OnInitialized ()
	{
		#region Login Initialization

		_loginEditContext = new (_loginModel);
		_loginMessageStore = new (_loginEditContext);

		#endregion

		#region Register Initialization

		_resisterEditContext = new (_registerModel);
		_registerMessageStore = new (_resisterEditContext);

		#endregion

		#region Verify Initialization

		_verificationEditContext = new (_verificationModel);
		_verificationMessageStore = new (_verificationEditContext);

		#endregion

		#region Set Password Initialization

		_setPasswordEditContext = new (_setPasswordModel);
		_setPasswordValidationMessageStore = new (_setPasswordEditContext);

		#endregion
	}

	protected override async Task OnAfterRenderAsync (bool firstRender)
	{
		if (!string.IsNullOrWhiteSpace (await LocalStorageService.GetItemAsync<string> ("login.refresh_token")))
		{
			NavigationManager.NavigateTo ("/", false, true);
			return;
		}

		await JsRuntime.InvokeVoidAsync ("onAfterRender");
	}

	#region Login

	private LoginDto _loginModel = new ();
	private EditContext _loginEditContext = null!;
	private ValidationMessageStore _loginMessageStore = null!;

	private async Task OnLoginSubmit ()
	{
		Logger.LogInformation ("Okay here it goes");

		_loginMessageStore.Clear ();

		if (!_loginEditContext.Validate ())
		{
			return;
		}

		Logger.LogInformation ("valid");

		if (!_loginModel.PhoneValid)
		{
			_loginMessageStore.Add (() => _loginModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		Logger.LogInformation ("phone valid");

		try
		{
			TokenResponse loginResult = await IdentityService.LoginAsync (new ()
				{
					Phone = _loginModel.Phone,
					Password = _loginModel.Password
				});

			Logger.LogInformation ($"{loginResult.JwtToken} is jwt and \n{loginResult.RefreshToken} is refresh");

			await LocalStorageService.RemoveItemAsync ("login.jwt");
			await LocalStorageService.RemoveItemAsync ("login.refresh_token");

			await LocalStorageService.SetItemAsync ("login.jwt", $"{loginResult.JwtToken}@{DateTime.UtcNow.AddMinutes (5)}");
			await LocalStorageService.SetItemAsync ("login.refresh_token", loginResult.RefreshToken);

			NavigationManager.NavigateTo ("/", true, true);
		}
		catch (RpcException exception)
		{
			if (exception.StatusCode == StatusCode.NotFound)
			{
				Logger.LogInformation ("Here it calls!");
				Logger.LogInformation ($"Phone: {_loginModel.Phone}");

				_loginMessageStore.Add (() => _loginModel.Phone!, "حساب کاربری با این شماره همراه و رمز عبور وجود نداره. مطمئنی همه چیز رو درست وارد کردی؟");
				_loginEditContext.NotifyValidationStateChanged ();
			}
		}
	}

	#endregion

	#region Register

	private RegisterDto _registerModel = new ();
	private EditContext _resisterEditContext = null!;
	private ValidationMessageStore _registerMessageStore = null!;

	private void OnRegisterSubmit ()
	{
		if (!_resisterEditContext.Validate ())
		{
			return;
		}

		if (!_registerModel.PhoneValid)
		{
			_registerMessageStore.Add (() => _registerModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		// TODO: Check if user is not currently registered
		// TODO: Connect to the Sms Api for sending code


		_info += $"The verification code is {Random.Shared.Next (1000, 9999)}";

		_loginState = LoginState.Verify;
		_verificationModel.Phone = _registerModel.Phone;
		_verificationPhoneDisabled = true;
		_verificationButtonText = VERIFICATION_VERIFY_CODE;
	}

	#endregion

	#region Verify

	private VerificationDto _verificationModel = new ();
	private EditContext _verificationEditContext = null!;
	private ValidationMessageStore _verificationMessageStore = null!;

	private const string VERIFICATION_SEND_CODE = "ارسال کد فعال‌سازی";
	private const string VERIFICATION_VERIFY_CODE = "تایید کد فعال‌سازی";

	private string _verificationButtonText = VERIFICATION_SEND_CODE;
	private bool _verificationPhoneDisabled;

	private async Task OnVerificationSubmit ()
	{
		_verificationMessageStore.Clear ();

		if (!_verificationEditContext.Validate ())
		{
			return;
		}

		if (!_verificationModel.PhoneValid)
		{
			_verificationMessageStore.Add (() => _verificationModel.Phone!, "شماره همراهی که وارد کردی درست نیست");
			return;
		}

		if (!_verificationPhoneDisabled)
		{
			_verificationButtonText = VERIFICATION_VERIFY_CODE;
			_verificationPhoneDisabled = true;

			// await SmsService.SendVerificationAsync (new ()
			// 	{
			// 		Phone = _verificationModel.Phone
			// 	});

			return;
		}

		if (_verificationModel.VerificationCode != "1000")
		{
			_verificationMessageStore.Add (() => _verificationModel.VerificationCode!, "کد تاییدی که وارد کردی درست نیست");
			return;
		}

		_loginState = LoginState.SetPassword;
	}

	#endregion

	#region Set Password

	private SetPasswordDto _setPasswordModel = new ();
	private EditContext _setPasswordEditContext = null!;
	private ValidationMessageStore _setPasswordValidationMessageStore = null!;

	private void OnSetPasswordSubmit ()
	{
		if (!_setPasswordEditContext.Validate ())
		{
			return;
		}

		NavigationManager.NavigateTo ("/", true, true);
	}

	#endregion

	#region Verify Phone

	#endregion

	#region Events

	private void OnLoginRequested ()
	{
		_loginState = LoginState.Login;
	}

	private void OnRegisterRequested ()
	{
		_loginState = LoginState.Register;
	}

	private void OnVerificationRequested ()
	{
		_loginState = LoginState.Verify;
	}

	#endregion

	private enum LoginState
	{
		Login,
		Register,
		Verify,
		SetPassword
	}
}